<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <parent>
      <groupId>org.apache.activemq.tests</groupId>
      <artifactId>artemis-tests-pom</artifactId>
      <version>2.21.0-SNAPSHOT</version>
   </parent>

   <artifactId>e2e-tests</artifactId>
   <packaging>jar</packaging>
   <name>End-to-End Tests</name>

   <properties>
      <activemq.basedir>${project.basedir}/../../</activemq.basedir>
      <e2ets-surefire-extra-args/>
   </properties>

   <dependencies>
      <dependency>
         <groupId>org.testcontainers</groupId>
         <artifactId>testcontainers</artifactId>
         <version>1.16.2</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-jms-client</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>org.apache.qpid</groupId>
         <artifactId>qpid-jms-client</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-server</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
         <type>test-jar</type>
      </dependency>
      <!-- this dependency is needed for JMX and maybe other tools from smoke-tests -->
      <dependency>
         <groupId>org.apache.activemq.tests</groupId>
         <artifactId>smoke-tests</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
         <type>test-jar</type>
      </dependency>
      <!-- this dependency is needed for CFUtil and other tools from integration-tests -->
      <dependency>
         <groupId>org.apache.activemq.tests</groupId>
         <artifactId>integration-tests</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
         <type>test-jar</type>
      </dependency>
   </dependencies>

   <build>
      <plugins>
         <plugin>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-maven-plugin</artifactId>
            <executions>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-pluggablequorumvote-primary</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/ha/replication/pluggablequorumvote/primary</instance>
                     <configuration>${basedir}/target/classes/servers/ha/replication/pluggablequorumvote/primary
                     </configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-pluggablequorumvote-backup</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/ha/replication/pluggablequorumvote/backup</instance>
                     <configuration>${basedir}/target/classes/servers/ha/replication/pluggablequorumvote/backup
                     </configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-dual-root</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/splitMirror/serverRoot</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/splitMirror/serverRoot</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-dual-A</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/splitMirror/serverA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/splitMirror/serverA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-dual-B</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/splitMirror/serverB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/splitMirror/serverB</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-qdr</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/brokerConnect/qdr</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/qdr</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-dualMirror-serverA</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/brokerConnect/serverA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/serverA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-dualMirror-serverB</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/brokerConnect/serverB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/serverB</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-replica-main-A</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/replicaMainServerA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/replicaMainServerA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-replica-backup-A</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/replicaBackupServerA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/replicaBackupServerA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-replica-main-B</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/replicaMainServerB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/replicaMainServerB</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-replica-backup-B</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/replicaBackupServerB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/replicaBackupServerB</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-chained-root</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/chainedMirror/serverRoot</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/chainedMirror/serverRoot</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-chained-A</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/chainedMirror/serverA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/chainedMirror/serverA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-chained-B</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/chainedMirror/serverB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/chainedMirror/serverB</configuration>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
               <execution>
                  <phase>test</phase>
                  <goals>
                     <goal>test-jar</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
               <skipTests>${skipE2ETests}</skipTests>
               <argLine>${e2ets-surefire-extra-args} ${activemq-surefire-argline} -Dorg.apache.activemq.artemis.tests.e2e.common.ContainerService.service.userid="1000"</argLine>
            </configuration>
         </plugin>
      </plugins>
   </build>
</project>