<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <parent>
      <groupId>org.apache.activemq.tests</groupId>
      <artifactId>artemis-tests-pom</artifactId>
      <version>3.0.0-SNAPSHOT</version>
   </parent>

   <artifactId>e2e-tests</artifactId>
   <packaging>jar</packaging>
   <name>End-to-End Tests</name>

   <properties>
      <activemq.basedir>${project.basedir}/../..</activemq.basedir>
      <e2e-tests.surefire-extra-args />
      <e2e-tests.dockerfile>Dockerfile-centos7-11</e2e-tests.dockerfile>
      <distributionDir>${activemq.basedir}/artemis-distribution/target/apache-artemis-${project.version}-bin/apache-artemis-${project.version}</distributionDir>
      <container-service-argline>-DContainerService.artemis-image.version=${project.version} -DContainerService.artemis-image.userid="1000"</container-service-argline>
   </properties>

   <dependencies>
      <dependency>
         <!-- this dependency is here to make sure this module is only executed
              after the distribution is created.
              Otherwise it will get here before the build eventually.
              e.g if you use mvn install -T 20 -->
         <groupId>org.apache.activemq</groupId>
         <artifactId>apache-artemis</artifactId>
         <version>${project.version}</version>
         <scope>compile</scope>
         <type>pom</type>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq.tests</groupId>
         <artifactId>artemis-test-support</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-unit-test-support</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>commons-io</groupId>
         <artifactId>commons-io</artifactId>
      </dependency>
      <dependency>
         <groupId>org.testcontainers</groupId>
         <artifactId>testcontainers</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.activemq</groupId>
         <artifactId>artemis-jms-client</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>org.apache.qpid</groupId>
         <artifactId>qpid-jms-client</artifactId>
      </dependency>
   </dependencies>

   <build>
      <plugins>
         <plugin>
            <!-- TODO: Review Codehaus usage...ARTEMIS-3750 -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
               <execution>
                  <id>prepare-container-image</id>
                  <phase>generate-test-resources</phase>
                  <goals>
                     <goal>exec</goal>
                  </goals>
                  <configuration>
                     <skip>${e2e-tests.skipImageBuild}</skip>
                     <executable>./prepare-docker.sh</executable>
                     <workingDirectory>${activemq.basedir}/artemis-docker</workingDirectory>
                     <arguments>
                        <argument>--from-local-dist</argument>
                        <argument>--local-dist-path</argument>
                        <argument>${distributionDir}</argument>
                     </arguments>
                  </configuration>
               </execution>
               <execution>
                  <id>build-container-image</id>
                  <phase>generate-test-resources</phase>
                  <goals>
                     <goal>exec</goal>
                  </goals>
                  <configuration>
                     <skip>${e2e-tests.skipImageBuild}</skip>
                     <executable>docker</executable>
                     <workingDirectory>${distributionDir}</workingDirectory>
                     <arguments>
                        <argument>build</argument>
                        <argument>--file</argument>
                        <argument>${distributionDir}/docker/${e2e-tests.dockerfile}</argument>
                        <argument>--tag</argument>
                        <argument>activemq-artemis:${project.version}</argument>
                        <argument>${distributionDir}</argument>
                     </arguments>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-maven-plugin</artifactId>
            <executions>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-pluggablequorumvote-primary</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/ha/replication/pluggablequorumvote/primary</instance>
                     <configuration>${basedir}/target/classes/servers/ha/replication/pluggablequorumvote/primary
                     </configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-pluggablequorumvote-backup</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/ha/replication/pluggablequorumvote/backup</instance>
                     <configuration>${basedir}/target/classes/servers/ha/replication/pluggablequorumvote/backup
                     </configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-dual-root</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/splitMirror/serverRoot</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/splitMirror/serverRoot</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-dual-A</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/splitMirror/serverA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/splitMirror/serverA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-dual-B</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/splitMirror/serverB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/splitMirror/serverB</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-qdr</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/brokerConnect/qdr</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/qdr</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-dualMirror-serverA</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/brokerConnect/serverA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/serverA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-dualMirror-serverB</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <role>amq</role>
                     <user>artemis</user>
                     <password>artemis</password>
                     <allowAnonymous>false</allowAnonymous>
                     <noWeb>false</noWeb>
                     <instance>${basedir}/target/brokerConnect/serverB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/serverB</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-replica-main-A</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/replicaMainServerA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/replicaMainServerA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-replica-backup-A</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/replicaBackupServerA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/replicaBackupServerA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-replica-main-B</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/replicaMainServerB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/replicaMainServerB</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-replica-backup-B</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/replicaBackupServerB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/replicaBackupServerB</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-chained-root</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/chainedMirror/serverRoot</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/chainedMirror/serverRoot</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-chained-A</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/chainedMirror/serverA</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/chainedMirror/serverA</configuration>
                  </configuration>
               </execution>
               <execution>
                  <phase>test-compile</phase>
                  <id>create-bc-chained-B</id>
                  <goals>
                     <goal>create</goal>
                  </goals>
                  <configuration>
                     <instance>${basedir}/target/brokerConnect/chainedMirror/serverB</instance>
                     <configuration>${basedir}/target/classes/servers/brokerConnect/chainedMirror/serverB</configuration>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
               <skipTests>${e2e-tests.skipTests}</skipTests>
               <argLine>${e2e-tests.surefire-extra-args} ${activemq-surefire-argline} ${container-service-argline}</argLine>
            </configuration>
         </plugin>
      </plugins>
   </build>
</project>
